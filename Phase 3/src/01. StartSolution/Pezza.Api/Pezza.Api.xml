<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Api</name>
    </assembly>
    <members>
        <member name="M:Api.Controllers.CustomerController.GetCustomer(System.Int32)">
            <summary>
            Get Customer by Id.
            </summary>
            <param name="id">int.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Get a customer</response>
            <response code="400">Error getting a customer</response>
            <response code="404">Customer not found</response>
        </member>
        <member name="M:Api.Controllers.CustomerController.Search">
            <summary>
            Get all Customers.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> repres
            enting the asynchronous operation.</returns>
            <response code="200">Customer Search</response>
            <response code="400">Error searching for customers</response>
        </member>
        <member name="M:Api.Controllers.CustomerController.Create(Common.DTO.CustomerDTO)">
            <summary>
            Create Customer.
            </summary>
            <remarks>
            Sample request:
                POST api/Customer
                {
                  "name": "Person A",
                  "address": "1 Tree Street",
                  "city": "Pretoria",
                  "province": "Gautenf",
                  "PostalCode": "0181",
                  "phone": "0721230000",
                  "email": "person.a@gmail.com"
                  "contactPerson": "Person B 0723210000"
                }.
            </remarks>
            <param name="customer">CustomerDTO.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Customer created</response>
            <response code="400">Error creating a customer</response>
        </member>
        <member name="M:Api.Controllers.CustomerController.Update(Common.DTO.CustomerDTO)">
            <summary>
            Update Customer.
            </summary>
            <remarks>
            Sample request:
                PUT api/Customer
                {
                  "id": 1,
                  "name": "Person A",
                  "address": "1 Tree Street",
                  "city": "Pretoria",
                  "province": "Gautenf",
                  "PostalCode": "0181",
                  "phone": "0721230000",
                  "email": "person.a@gmail.com"
                  "contactPerson": "Person B 0723210000"
                }.
            </remarks>
            <param name="customer">CustomerDTO.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Customer updated</response>
            <response code="400">Error updating a customer</response>
            <response code="404">Customer not found</response>
        </member>
        <member name="M:Api.Controllers.CustomerController.Delete(System.Int32)">
            <summary>
            Remove Customer by Id.
            </summary>
            <param name="id">int.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Customer deleted</response>
            <response code="400">Error deleting a customer</response>
        </member>
        <member name="M:Api.Controllers.NotifyController.Get(System.Int32)">
            <summary>
            Get Notify by Id.
            </summary>
            <param name="id">Primary Key.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Get a notification</response>
            <response code="400">Error getting a notification</response>
            <response code="404">Notification not found</response>
        </member>
        <member name="M:Api.Controllers.NotifyController.Search">
            <summary>
            Get all Notifies.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Notification Search</response>
            <response code="400">Error searching for notifications</response>
        </member>
        <member name="M:Api.Controllers.NotifyController.Create(Common.DTO.NotifyDTO)">
            <summary>
            Create Notify.
            </summary>
            <remarks>
            Sample request:
                POST api/Notify
                {
                  "name": "Person A",
                  "address": "1 Tree Street",
                  "city": "Pretoria",
                  "province": "Gautenf",
                  "PostalCode": "0181",
                  "phone": "0721230000",
                  "email": "person.a@gmail.com"
                  "contactPerson": "Person B 0723210000"
                }.
            </remarks>
            <param name="notify">Notification Data DTO.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Notification created</response>
            <response code="400">Error creating a notification</response>
        </member>
        <member name="M:Api.Controllers.NotifyController.Update(Common.DTO.NotifyDTO)">
            <summary>
            Update Notify.
            </summary>
            <remarks>
            Sample request:
                PUT api/Notify
                {
                  "customerId": "1",
                  "email": "person.a@gmail.com"
                }.
            </remarks>
            <param name="notify">Notify Data DTO.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Notification updated</response>
            <response code="400">Error updating a notification</response>
            <response code="404">Notification not found</response>
        </member>
        <member name="M:Api.Controllers.NotifyController.Delete(System.Int32)">
            <summary>
            Remove Notify by Id.
            </summary>
            <param name="id">Primary Key.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Notification deleted</response>
            <response code="400">Error deleting a notification</response>
        </member>
        <member name="M:Api.Controllers.OrderController.Get(System.Int32)">
            <summary>
            Get Order by Id.
            </summary>
            <param name="id">int.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Get a product</response>
            <response code="400">Error getting a product</response>
            <response code="404">Product not found</response>
        </member>
        <member name="M:Api.Controllers.OrderController.Search">
            <summary>
            Get all Orders.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Order Search</response>
            <response code="400">Error searching for orders</response>
        </member>
        <member name="M:Api.Controllers.OrderController.Create(Common.DTO.OrderDTO)">
            <summary>
            Create Order.
            </summary>
            <remarks>
            Sample request:
                POST api/Order
                {
                  "customerId": "1",
                  "restaurantId": "1",
                  "amount": "1.00"
                }.
            </remarks>
            <param name="data">OrderDTO.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Order created</response>
            <response code="400">Error creating a order</response>
        </member>
        <member name="M:Api.Controllers.OrderController.Update(Common.DTO.OrderDTO)">
            <summary>
            Update Order.
            </summary>
            <remarks>
            Sample request:
                PUT api/Order
                {
                  "id": 1,,
                  "completed": true
                }.
            </remarks>
            <param name="data">OrderDTO.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Order updated</response>
            <response code="400">Error updating a order</response>
            <response code="404">Order not found</response>
        </member>
        <member name="M:Api.Controllers.OrderController.Delete(System.Int32)">
            <summary>
            Remove Order by Id.
            </summary>
            <param name="id">int.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Order deleted</response>
            <response code="400">Error deleting a order</response>
        </member>
        <member name="M:Api.Controllers.PictureController.Get(System.String,System.String,System.Boolean)">
            <summary>
            Uploads the specified dto.
            </summary>
            <param name="file">File.</param>
            <param name="folder">Folder.</param>
            <param name="thumbnail">Return thumbnail or not.</param>
            <returns>HttpResponseMessage.</returns>
            <response code="200">Picture</response>
        </member>
        <member name="M:Api.Controllers.PictureController.ReturnNotFoundImage">
            <summary>
            Returns the not found image.
            </summary>
            <returns>Not found image.</returns>
        </member>
        <member name="M:Api.Controllers.ProductController.Get(System.Int32)">
            <summary>
            Get Product by Id.
            </summary>
            <param name="id">int.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Get a product</response>
            <response code="400">Error getting a product</response>
            <response code="404">Product not found</response>
        </member>
        <member name="M:Api.Controllers.ProductController.Search">
            <summary>
            Get all Products.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Product Search</response>
            <response code="400">Error searching for products</response>
        </member>
        <member name="M:Api.Controllers.ProductController.Create(Common.DTO.ProductDTO)">
            <summary>
            Create Product.
            </summary>
            <remarks>
            Sample request:
                POST api/Product
                {
                  "name": "Tomatoes",
                  "description": "",
                  "pictureUrl": "Base64",
                  "price": "50.00",
                  "special": false,
                  "isActive": true
                }.
            </remarks>
            <param name="data">ProductDTO.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Product created</response>
            <response code="400">Error creating a product</response>
        </member>
        <member name="M:Api.Controllers.ProductController.Update(Common.DTO.ProductDTO)">
            <summary>
            Update Product.
            </summary>
            <remarks>
            Sample request:
                PUT api/Product
                {
                  "id": 1,
                  "special": true
                }.
            </remarks>
            <param name="data">ProductDTO.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Product updated</response>
            <response code="400">Error updating a product</response>
            <response code="404">Product not found</response>
        </member>
        <member name="M:Api.Controllers.ProductController.Delete(System.Int32)">
            <summary>
            Remove Product by Id.
            </summary>
            <param name="id">int.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Product deleted</response>
            <response code="400">Error deleting a product</response>
        </member>
        <member name="M:Api.Controllers.RestaurantController.Get(System.Int32)">
            <summary>
            Get Restaurant by Id.
            </summary>
            <param name="id">int.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Get a restaurant</response>
            <response code="400">Error getting a restaurant</response>
            <response code="404">Restaurant not found</response>
        </member>
        <member name="M:Api.Controllers.RestaurantController.Search">
            <summary>
            Get all Restaurants.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Restaurant Search</response>
            <response code="400">Error searching for restaurants</response>
        </member>
        <member name="M:Api.Controllers.RestaurantController.Create(Common.DTO.RestaurantDTO)">
             <summary>
             Create Stock.
             </summary>
             <remarks>
             Sample request:
            
                 POST api/Restaurant
                 {
                   "name": "Restaurant 1",
                   "description": "",
                   "pictureUrl": "base64",
                   "isActive": true
                   "Address": {
                     "city": "Pretoria",
                     "province": "Gauteng",
                     "PostalCode": "0000"
                   }
                 }.
             </remarks>
             <param name="data">RestaurantDTO.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
             <response code="200">Restaurant created</response>
             <response code="400">Error creating a restaurant</response>
        </member>
        <member name="M:Api.Controllers.RestaurantController.Update(Common.DTO.RestaurantDTO)">
             <summary>
             Update Restaurant.
             </summary>
             <remarks>
             Sample request:
            
                 PUT api/Restaurant
                 {
                   "id": 1,
                   "name": "New Restaurant"
                 }.
             </remarks>
             <param name="data">RestaurantDTO.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
             <response code="200">Restaurant updated</response>
             <response code="400">Error updating a restaurant</response>
             <response code="404">Restaurant not found</response>
        </member>
        <member name="M:Api.Controllers.RestaurantController.Delete(System.Int32)">
            <summary>
            Remove Restaurant by Id.
            </summary>
            <param name="id">int.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Restaurant deleted</response>
            <response code="400">Error deleting a restaurant</response>
        </member>
        <member name="M:Api.Controllers.StockController.Get(System.Int32)">
            <summary>
            Get Stock by Id.
            </summary>
            <param name="id">id.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Get a pizza</response>
            <response code="400">Error getting a pizza</response>
            <response code="404">Stock not found</response>
        </member>
        <member name="M:Api.Controllers.StockController.Search">
            <summary>
            Get all Stock.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Stock Search</response>
            <response code="400">Error searching for pizza</response>
        </member>
        <member name="M:Api.Controllers.StockController.Create(Common.DTO.StockDTO)">
            <summary>
            Create Stock.
            </summary>
            <remarks>
            Sample request:
                POST api/Stock
                {
                  "name": "Tomatoes",
                  "unitOfMeasure": "Kg",
                  "valueOfMeasure": "1",
                  "quantity": "50"
                  "comment": ""
                }.
            </remarks>
            <param name="data">StockDTO.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Stock created</response>
            <response code="400">Error creating a pizza</response>
        </member>
        <member name="M:Api.Controllers.StockController.Update(Common.DTO.StockDTO)">
             <summary>
             Update Stock.
             </summary>
             <remarks>
             Sample request:
            
                 PUT api/Stock
                 {
                   "id": 1
                   "quantity": 30
                 }.
             </remarks>
             <param name="data">StockDTO.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
             <response code="200">Stock updated</response>
             <response code="400">Error updating a pizza</response>
             <response code="404">Stock not found</response>
        </member>
        <member name="M:Api.Controllers.StockController.Delete(System.Int32)">
            <summary>
            Remove Stock by Id.
            </summary>
            <param name="id">int.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <response code="200">Stock deleted</response>
            <response code="400">Error deleting a pizza</response>
        </member>
    </members>
</doc>
